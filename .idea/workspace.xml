<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="BranchesTreeState">
    <expand>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="LOCAL_ROOT" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:origin" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:origin" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:dependabot" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:origin" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:dependabot" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:go_modules" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:origin" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:dependabot" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:go_modules" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:gorm.io" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:origin" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:elithrar" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:origin" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:renovate" type="e8cecc67:BranchNodeDescriptor" />
      </path>
    </expand>
    <select />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="b05377a4-3000-4e7c-8274-7173de3dda45" name="Default Changelist" comment="&#10;3、4、5、6&#10;第三层的写法过于冗长， 我们简化一下：&#10;简化思路： 从 cmd 的输出管道 直连 缓冲区 bytes.Buffer后，你.Bytes()一下就有了二进制， 把这个二进制字节数组传递给 file.Write 就实现了cmd 输出写入文件的诉求：&#10;&#10;&#10;第四层： 将 cmd输出写入文件  Stdout-&gt;bytes.Buffer--&gt;file.Write(ouputbuf1.Bytes()) &#10; &#10;第五层：  用内存/系统的命名管道实现进程通信~os.Pipe() ~ 基于操作系统文件思维  22-3-13&#10;&#10;7.实现进程的信号通信 &#10;（2022 年 3 月 13 日 成功基于proc.Signal(sig)向指定 pid发送信号关闭了印象笔记 ）&#10;&#10;8.go-parallelist-(1-元春)-多进程编程2-实现进程间的tcp通讯—手写网络服务器-分布式通信框架-22-3-19">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/多线程编程/3.channelval.go" beforeDir="false" afterPath="$PROJECT_DIR$/多线程编程/3.channelval.go" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="GOROOT" url="file:///usr/local/go" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GoLibraries">
    <option name="urls">
      <list>
        <option value="file://$PROJECT_DIR$" />
      </list>
    </option>
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="253LJ05BJhJauYecfSN9drksYYV" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="ASKED_SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="configurable..is.expanded" value="true" />
    <property name="configurable.GoLibrariesConfigurable.is.expanded" value="true" />
    <property name="go.format.on.save.advertiser.fired" value="true" />
    <property name="go.formatter.settings.were.checked" value="true" />
    <property name="go.import.settings.migrated" value="true" />
    <property name="go.modules.go.list.on.any.changes.was.set" value="true" />
    <property name="go.sdk.automatically.set" value="true" />
    <property name="go.tried.to.enable.integration.vgo.integrator" value="true" />
    <property name="go.watchers.conflict.with.on.save.actions.check.performed" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="settings.editor.selected.configurable" value="editor.preferences.fonts.default" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/多线程编程" />
      <recent name="$PROJECT_DIR$/多进程编程/样例" />
    </key>
  </component>
  <component name="RunManager" selected="Go Build.go build 3.channelval.go">
    <configuration name="go build 1channel.go" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="1.al_go_parallelist" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/多线程编程/1channel.go" />
      <method v="2" />
    </configuration>
    <configuration name="go build 3.channelval.go" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="1.al_go_parallelist" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/多线程编程/3.channelval.go" />
      <method v="2" />
    </configuration>
    <configuration name="go build 4.信号.go" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="1.al_go_parallelist" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/多进程编程/4.信号.go" />
      <method v="2" />
    </configuration>
    <configuration name="go build 4.channel计数器.go" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="1.al_go_parallelist" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/多线程编程/4.channel计数器.go" />
      <method v="2" />
    </configuration>
    <configuration name="go build 5.socket通信.go" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="1.al_go_parallelist" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/多进程编程/5.socket通信.go" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Go Build.go build 3.channelval.go" />
        <item itemvalue="Go Build.go build 4.channel计数器.go" />
        <item itemvalue="Go Build.go build 1channel.go" />
        <item itemvalue="Go Build.go build 5.socket通信.go" />
        <item itemvalue="Go Build.go build 4.信号.go" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="第三层的写法过于冗长， 我们简化一下：&#10;简化思路： 从 cmd 的输出管道 直连 缓冲区 bytes.Buffer后，你.Bytes()一下就有了二进制， 把这个二进制字节数组传递给 file.Write 就实现了cmd 输出写入文件的诉求：&#10;&#10;&#10;第四层： 将 cmd输出写入文件  Stdout-&gt;bytes.Buffer--&gt;file.Write(ouputbuf1.Bytes())" />
    <MESSAGE value="&#10;3、4、5、6&#10;第三层的写法过于冗长， 我们简化一下：&#10;简化思路： 从 cmd 的输出管道 直连 缓冲区 bytes.Buffer后，你.Bytes()一下就有了二进制， 把这个二进制字节数组传递给 file.Write 就实现了cmd 输出写入文件的诉求：&#10;&#10;&#10;第四层： 将 cmd输出写入文件  Stdout-&gt;bytes.Buffer--&gt;file.Write(ouputbuf1.Bytes()) &#10; &#10;第五层：  用内存/系统的命名管道实现进程通信~os.Pipe() ~ 基于操作系统文件思维  22-3-13&#10;&#10;7.实现进程的信号通信 &#10;（2022 年 3 月 13 日 成功基于proc.Signal(sig)向指定 pid发送信号关闭了印象笔记 ）" />
    <MESSAGE value="&#10;3、4、5、6&#10;第三层的写法过于冗长， 我们简化一下：&#10;简化思路： 从 cmd 的输出管道 直连 缓冲区 bytes.Buffer后，你.Bytes()一下就有了二进制， 把这个二进制字节数组传递给 file.Write 就实现了cmd 输出写入文件的诉求：&#10;&#10;&#10;第四层： 将 cmd输出写入文件  Stdout-&gt;bytes.Buffer--&gt;file.Write(ouputbuf1.Bytes()) &#10; &#10;第五层：  用内存/系统的命名管道实现进程通信~os.Pipe() ~ 基于操作系统文件思维  22-3-13&#10;&#10;7.实现进程的信号通信 &#10;（2022 年 3 月 13 日 成功基于proc.Signal(sig)向指定 pid发送信号关闭了印象笔记 ）&#10;&#10;go-parallelist-(1-元春)-多进程编程2-实现进程间的tcp通讯—手写网络服务器-分布式通信框架-22-3-19" />
    <MESSAGE value="&#10;3、4、5、6&#10;第三层的写法过于冗长， 我们简化一下：&#10;简化思路： 从 cmd 的输出管道 直连 缓冲区 bytes.Buffer后，你.Bytes()一下就有了二进制， 把这个二进制字节数组传递给 file.Write 就实现了cmd 输出写入文件的诉求：&#10;&#10;&#10;第四层： 将 cmd输出写入文件  Stdout-&gt;bytes.Buffer--&gt;file.Write(ouputbuf1.Bytes()) &#10; &#10;第五层：  用内存/系统的命名管道实现进程通信~os.Pipe() ~ 基于操作系统文件思维  22-3-13&#10;&#10;7.实现进程的信号通信 &#10;（2022 年 3 月 13 日 成功基于proc.Signal(sig)向指定 pid发送信号关闭了印象笔记 ）&#10;&#10;8.go-parallelist-(1-元春)-多进程编程2-实现进程间的tcp通讯—手写网络服务器-分布式通信框架-22-3-19" />
    <option name="LAST_COMMIT_MESSAGE" value="&#10;3、4、5、6&#10;第三层的写法过于冗长， 我们简化一下：&#10;简化思路： 从 cmd 的输出管道 直连 缓冲区 bytes.Buffer后，你.Bytes()一下就有了二进制， 把这个二进制字节数组传递给 file.Write 就实现了cmd 输出写入文件的诉求：&#10;&#10;&#10;第四层： 将 cmd输出写入文件  Stdout-&gt;bytes.Buffer--&gt;file.Write(ouputbuf1.Bytes()) &#10; &#10;第五层：  用内存/系统的命名管道实现进程通信~os.Pipe() ~ 基于操作系统文件思维  22-3-13&#10;&#10;7.实现进程的信号通信 &#10;（2022 年 3 月 13 日 成功基于proc.Signal(sig)向指定 pid发送信号关闭了印象笔记 ）&#10;&#10;8.go-parallelist-(1-元春)-多进程编程2-实现进程间的tcp通讯—手写网络服务器-分布式通信框架-22-3-19" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/多进程编程/2管道通信1匿名管道.go</url>
          <line>17</line>
          <option name="timeStamp" value="4" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/多进程编程/2管道通信1匿名管道.go</url>
          <line>62</line>
          <option name="timeStamp" value="5" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/多进程编程/2管道通信1匿名管道.go</url>
          <line>72</line>
          <option name="timeStamp" value="6" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/多进程编程/2管道通信1匿名管道.go</url>
          <line>146</line>
          <option name="timeStamp" value="7" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/多进程编程/2管道通信1匿名管道.go</url>
          <line>60</line>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/多进程编程/2管道通信1匿名管道.go</url>
          <line>126</line>
          <option name="timeStamp" value="9" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/多进程编程/2管道通信1匿名管道.go</url>
          <line>136</line>
          <option name="timeStamp" value="10" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/多进程编程/4.信号.go</url>
          <line>95</line>
          <option name="timeStamp" value="11" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/多进程编程/4.信号.go</url>
          <line>100</line>
          <option name="timeStamp" value="13" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/多线程编程/3.channelval.go</url>
          <line>36</line>
          <option name="timeStamp" value="14" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>